# ---- Basic webserver config ----
HTTP_SERVERNAME=

# HTTP Settings, if HTTP_PORT is set, then a HTTP socket is setup
HTTP_PORT=800

# SSL Settings, if HTTPS_PORT is set, then a SSL->HTTP socket is setup
HTTPS_PORT=4430
HTTPS_SSL_SERVER_PEM=./config/server.pem

HTTP_HOME_DIRECTORY=./webapp/html
HTTP_HOME_SCRIPT_NAME=index.py
HTTP_MIMETYPES_FILENAME=./config/mimetypes.txt
HTTP_LOGNAME=httpdaemon.log

# ---- Logging settings ----
LOGGING_DIR=./logs

# Log size and rotation
LOGGING_SIZE=(1024*100)*100
LOGGING_NO=10

# One of the follow settings : debug, info, warning, error,  critical, none
LOGGING_LEVEL=info

# ---- Database Settings ----
DB_FILENAME=./config/db_daemon.db
DB_VERSION=1.0

# max time in seconds: 10 minutes
DB_SQLEXEC_MAXTIME=600
# max time in milli-seconds: 30 seconds
DB_SQLLOCK_MAXTIME=30000

# ---- Authentication Settings ----
AUTH_ADMIN_COOKIEID=AdminAuthID
AUTH_USER_COOKIEID=UserAuthID

AUTH_ADMIN_USERS=admin:adminPassword
AUTH_USERS=user1:user1password, user2:user2password


#Configuration file Scoping
#==========================
#The configuration file is structured in hierarchical form; this allows previous
#defined/high-up parameters to be used in lower node configuration structures.
#This allows for default values to be defined in higher levels to act as global
#configuration without need to search/replace a whole document. Most of the
#parameters can be overridden, appended, or removed from a given configuration section.

#Basic Overview Structure
#========================

# create a single value parameter
MYVAR=123

# myvar is now a list [123, 456]
MYVAR=456

# to replace myvar with a new value, use the '*' operator
*MYVAR=789

# Run python code to set parameter
|MYDYNCLOAD='''
import platform
_ = platform.system()
'''
MYDYNCPARAM=${|MYDYNCLOAD}

|PY_DATETIME='''
import datetime
_ = datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S')
'''
MYDATETIMEPARAM=myTime is: ${|PY_DATETIME}

# Run O/S Programs (Variables starting with !), used via param2=${!param1} ----------
!OS_DATETIME=printf "%TIME% %DATE%"
MYDATETIMEPARAM2=myTime2 is: ${|OS_DATETIME}

|PY_HELLO='''_="hello world"'''
TEST_VAR1=${|PY_HELLO}
TEST_VAR2=${!OS_DATETIME}
TEST_VAR3=${|PY_DATETIME}

# Define a root level parameter
MYPARAM=123

# define a global username / password for the following sections
USERNAME=someuser
PASSWORD=

# Define a basic testing group section
[Example Group 1]
    # Parameters defined in a testing group will override those defined in the root level of the configuration.
    # Any any sub section will use these values.
    MYPARAM=abc
    MYVAR=123

    # Define a web service to test
    [[SubGroup1]]
        # Going with the above defaults, but use the LOAD_URL parameter to define where the service is
        SUBGROUPSETTING=${MYPARAM}

    [[SubGroup2]]
        # The '-' operator remove any previous define parameter from use within this section.
        -MYPARAM

        # The '+' operator appends any previous defined parameters from use within this section.
        # Effectively testing for 'Hello World' and 'How Are You'
        +MYPARAM=xyz
        +MYPARAM=123

        # replace myvar value using '*' and absolute path
        */Example Group 2/MYVAR=456

[Example Group 2]
       MYVAR=${/Example Group 1/MYVAR}


#When switching from sections using config operators: < >, [ ], [[ ]], [[[ ]]]
#you do not need to explicitly need to use END-SCOPE or END-SCOPE-GLOBAL
#as these operators will do the switch by default.
#
#Other times, like using the INCLUDE keyword, where the use of END-SCOPE, END-SCOPE-GLOBAL
#at the end of the included script can make for a safer/saner configuration structure.

#Include Config File
#===================
# The INCLUDE keyword will load/add additional files to allow larger/easier to manage configuration.
# The include keyword can be used in any part of configuration, but take note of the parameter scopes rules
# when including random parameters as the result may not be what you expect. Use the END-SCOPE-GLOBAL if unsure.
INCLUDE=./config/myincludeFile.inc


#Ending Configuration Scope
#==========================
# Exit the current configuration section scope. This can be used to define commands for the previous section,
# and ending the current scoped section. This is also useful in included files to prevent parameters
# from being assigned in incorrect areas within the parent config file.
END-SCOPE

# Like END-SCOPE, but exits scope back to the global/root configuration section.
# This is also useful in included files to prevent parameters from being assigned in incorrect areas within the parent config file.
END-SCOPE-GLOBAL

